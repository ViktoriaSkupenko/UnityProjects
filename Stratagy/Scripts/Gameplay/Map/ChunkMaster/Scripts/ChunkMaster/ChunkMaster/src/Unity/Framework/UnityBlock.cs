using Gameplay.Map.ChunkMaster.Scripts.ChunkMaster.ChunkMaster.src.NET.Framework;
using Gameplay.Map.ChunkMaster.Scripts.ChunkMaster.ChunkMaster.src.NET.Interfaces;
using Gameplay.Map.ChunkMaster.Scripts.ChunkMaster.ChunkMaster.src.Unity.Factory;
using UnityEngine;

namespace Gameplay.Map.ChunkMaster.Scripts.ChunkMaster.ChunkMaster.src.Unity.Framework
{
    /// <summary>
    /// Block class is the meat of the world class. 
    /// The world contains sectors, which contain chunks, 
    /// which contains blocks. The blocks can be edited by 
    /// changing their values. Blocks can be stored in an 
    /// external file using a multidimensional byte array, 
    /// generated by the sector class.
    /// </summary>
    public class UnityBlock : Block, IBlock
    {

        /// <summary>
        /// The 3D game object in run time space.
        /// </summary>
        public GameObject gameObject { get; private set; }

        /// <summary>
        /// Returns the current reference as a vector3 relative to the world space.
        /// </summary>
        public new Vector3 worldPosition
        {
            get
            {
                return base.worldPosition.Vector3();
            }
        }

        /// <summary>
        /// The constructor with parameters.
        /// </summary>
        /// <param name="worldPosition">Requires the block's world point.</param>
        /// <param name="chunk">Requires the parent chunk object for rendering.</param>
        public UnityBlock(Vector3 worldPosition, IChunk chunk)
            : base(worldPosition.Point(), chunk)
        {

            gameObject = TransformFactory.CreateTransform(worldPosition.Snap().ToString(),
                worldPosition,
                Quaternion.Euler(Vector3.zero),
                Vector3.one,
                ((UnityChunk)chunk).gameObject.transform
                ).gameObject;

        }

        /// <summary>
        /// The Destructor.
        /// </summary>
        public new void Destroy()
        {
            chunk.blocks[chunk.GetIndexByPoint(worldPosition.Point())] = null; // Dispose block
            SetContent(null);
            GameObject.Destroy(gameObject);
        }


        /// <inheritdoc />
        public override string ToString()
        {
            return base.ToString();
        }
    }
}
